{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9db6d5e6-93ea-46ba-8386-642053735eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# === A/B(/n) Significance Calculator â€” Jupyter Version ===\n",
    "# Usage examples (run in a new cell after this one):\n",
    "# pretty, raw = analyze_file(r\"C:\\Users\\Mohammad\\Downloads\\ab_test_with_revenue.csv\")\n",
    "# pretty, raw = analyze_file(r\"C:\\Users\\Mohammad\\Downloads\\ab_test_with_revenue.csv\",\n",
    "#                            control=\"A\", alpha=0.05, sides=\"two\", mcc=\"holm\",\n",
    "#                            out=r\"C:\\Users\\Mohammad\\Downloads\\ab_test_results.xlsx\")\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.stats import norm\n",
    "from pathlib import Path\n",
    "from IPython.display import display\n",
    "\n",
    "# ---------- Multiple-comparisons helpers ----------\n",
    "def holm_adjust(p):\n",
    "    p = np.asarray(p, dtype=float)\n",
    "    m = len(p)\n",
    "    order = np.argsort(p)                   # ascending\n",
    "    p_sorted = p[order]\n",
    "    # step-down: (m - i) * p_(i), monotone non-decreasing via cummax\n",
    "    adj_sorted = np.maximum.accumulate(np.minimum((m - np.arange(m)) * p_sorted, 1.0))\n",
    "    out = np.empty(m, dtype=float); out[order] = adj_sorted\n",
    "    return out\n",
    "\n",
    "def bonferroni_adjust(p):\n",
    "    p = np.asarray(p, dtype=float)\n",
    "    return np.minimum(p * len(p), 1.0)\n",
    "\n",
    "def bh_fdr_adjust(p):\n",
    "    p = np.asarray(p, dtype=float)\n",
    "    m = len(p)\n",
    "    order = np.argsort(p)\n",
    "    p_sorted = p[order]\n",
    "    adj_sorted = np.empty(m, dtype=float)\n",
    "    running = 1.0\n",
    "    for i in range(m, 0, -1):              # step-up procedure\n",
    "        running = min(running, p_sorted[i-1] * m / i)\n",
    "        adj_sorted[i-1] = min(running, 1.0)\n",
    "    out = np.empty(m, dtype=float); out[order] = adj_sorted\n",
    "    return out\n",
    "\n",
    "# ---------- Core stats ----------\n",
    "def two_prop_z_test(x_ctrl, n_ctrl, x_var, n_var, alternative=\"two-sided\"):\n",
    "    p1 = x_ctrl / n_ctrl\n",
    "    p2 = x_var / n_var\n",
    "    p_pool = (x_ctrl + x_var) / (n_ctrl + n_var)\n",
    "    se = np.sqrt(p_pool * (1 - p_pool) * (1/n_ctrl + 1/n_var))\n",
    "    if se == 0:\n",
    "        return np.nan, 1.0\n",
    "    z = (p2 - p1) / se\n",
    "    if alternative == \"two-sided\":\n",
    "        p = 2 * (1 - norm.cdf(abs(z)))\n",
    "    elif alternative == \"greater\":\n",
    "        p = 1 - norm.cdf(z)\n",
    "    else:\n",
    "        p = norm.cdf(z)\n",
    "    return z, p\n",
    "\n",
    "def diff_ci_pp(p_ctrl, n_ctrl, p_var, n_var, alpha=0.05, alternative=\"two-sided\"):\n",
    "    diff = p_var - p_ctrl\n",
    "    se = np.sqrt(p_ctrl*(1-p_ctrl)/n_ctrl + p_var*(1-p_var)/n_var)\n",
    "    if se == 0:\n",
    "        return (np.nan, np.nan)\n",
    "    if alternative == \"two-sided\":\n",
    "        zcrit = norm.ppf(1 - alpha/2)\n",
    "        return (diff - zcrit*se, diff + zcrit*se)\n",
    "    elif alternative == \"greater\":\n",
    "        zcrit = norm.ppf(1 - alpha)\n",
    "        return (diff - zcrit*se, np.inf)\n",
    "    else:\n",
    "        zcrit = norm.ppf(1 - alpha)\n",
    "        return (-np.inf, diff + zcrit*se)\n",
    "\n",
    "# ---------- Analysis ----------\n",
    "def run_analysis_df(df, control_label=None, alpha=0.05, sides=\"two\", mcc=\"holm\"):\n",
    "    # required columns\n",
    "    need = {\"variant\",\"visits\",\"conversions\"}\n",
    "    missing = need - set(df.columns)\n",
    "    if missing:\n",
    "        raise ValueError(f\"Missing required column(s): {', '.join(sorted(missing))}\")\n",
    "    if (df[\"visits\"] < 0).any() or (df[\"conversions\"] < 0).any():\n",
    "        raise ValueError(\"Visits/conversions must be non-negative.\")\n",
    "    if (df[\"conversions\"] > df[\"visits\"]).any():\n",
    "        bad = df[df[\"conversions\"] > df[\"visits\"]]\n",
    "        raise ValueError(f\"Conversions exceed visits in rows:\\n{bad.to_string(index=False)}\")\n",
    "\n",
    "    df = df.copy()\n",
    "    df[\"visits\"] = df[\"visits\"].astype(int)\n",
    "    df[\"conversions\"] = df[\"conversions\"].astype(int)\n",
    "\n",
    "    control = control_label or df.iloc[0][\"variant\"]\n",
    "    if control not in set(df[\"variant\"]):\n",
    "        raise ValueError(f\"Control '{control}' not found in 'variant' column.\")\n",
    "\n",
    "    # per-variant metrics\n",
    "    df[\"cr\"] = df[\"conversions\"] / df[\"visits\"]\n",
    "    has_revenue = \"revenue\" in df.columns\n",
    "    if has_revenue:\n",
    "        df[\"revenue\"] = pd.to_numeric(df[\"revenue\"], errors=\"coerce\").fillna(0)\n",
    "        df[\"aov\"] = np.where(df[\"conversions\"] > 0, df[\"revenue\"] / df[\"conversions\"], np.nan)\n",
    "        df[\"rpv\"] = df[\"revenue\"] / df[\"visits\"]\n",
    "\n",
    "    # control row & alternative\n",
    "    ctrl = df.loc[df[\"variant\"] == control].iloc[0]\n",
    "    alt = {\"two\":\"two-sided\",\"greater\":\"greater\",\"less\":\"less\"}[sides]\n",
    "\n",
    "    rows = []\n",
    "    for _, row in df.iterrows():\n",
    "        v = row[\"variant\"]\n",
    "        if v == control:\n",
    "            rows.append({\n",
    "                \"variant\": v, \"z\": np.nan, \"p\": np.nan,\n",
    "                \"ci_lo_pp\": np.nan, \"ci_hi_pp\": np.nan,\n",
    "                \"lift_pp\": 0.0, \"lift_rel_%\": 0.0,\n",
    "                \"delta_rpv\": (row.get(\"rpv\", np.nan) - ctrl.get(\"rpv\", np.nan)) if has_revenue else np.nan\n",
    "            })\n",
    "            continue\n",
    "        z, p = two_prop_z_test(\n",
    "            int(ctrl[\"conversions\"]), int(ctrl[\"visits\"]),\n",
    "            int(row[\"conversions\"]),  int(row[\"visits\"]),\n",
    "            alternative=alt\n",
    "        )\n",
    "        ci_lo, ci_hi = diff_ci_pp(\n",
    "            float(ctrl[\"cr\"]), int(ctrl[\"visits\"]),\n",
    "            float(row[\"cr\"]),  int(row[\"visits\"]),\n",
    "            alpha=alpha, alternative=\"two-sided\" if sides==\"two\" else sides\n",
    "        )\n",
    "        lift_pp = (row[\"cr\"] - ctrl[\"cr\"]) * 100\n",
    "        lift_rel = (row[\"cr\"]/ctrl[\"cr\"] - 1.0) * 100 if ctrl[\"cr\"] > 0 else np.nan\n",
    "        delta_rpv = (row.get(\"rpv\", np.nan) - ctrl.get(\"rpv\", np.nan)) if has_revenue else np.nan\n",
    "        rows.append({\n",
    "            \"variant\": v, \"z\": z, \"p\": p,\n",
    "            \"ci_lo_pp\": ci_lo*100, \"ci_hi_pp\": ci_hi*100,\n",
    "            \"lift_pp\": lift_pp, \"lift_rel_%\": lift_rel,\n",
    "            \"delta_rpv\": delta_rpv\n",
    "        })\n",
    "\n",
    "    res = pd.merge(\n",
    "        df[[\"variant\",\"visits\",\"conversions\",\"cr\"] + ([\"revenue\",\"aov\",\"rpv\"] if has_revenue else [])],\n",
    "        pd.DataFrame(rows), on=\"variant\", how=\"left\"\n",
    "    )\n",
    "\n",
    "    # multiple comparisons correction on non-control rows\n",
    "    mask = res[\"variant\"] != control\n",
    "    pvals = res.loc[mask, \"p\"].values\n",
    "    if len(pvals) > 0 and not np.all(np.isnan(pvals)):\n",
    "        if mcc == \"holm\":\n",
    "            res.loc[mask, \"p_adj\"] = holm_adjust(pvals)\n",
    "        elif mcc == \"bonferroni\":\n",
    "            res.loc[mask, \"p_adj\"] = bonferroni_adjust(pvals)\n",
    "        elif mcc == \"bh\":\n",
    "            res.loc[mask, \"p_adj\"] = bh_fdr_adjust(pvals)\n",
    "        else:\n",
    "            res.loc[mask, \"p_adj\"] = pvals\n",
    "    res.loc[~mask, \"p_adj\"] = np.nan\n",
    "\n",
    "    res[\"significant\"] = (res[\"variant\"] != control) & (res[\"p_adj\"] <= alpha)\n",
    "    return control, (\"revenue\" in df.columns), res\n",
    "\n",
    "# ---------- Notebook helpers ----------\n",
    "def analyze_df(df, control=None, alpha=0.05, sides=\"two\", mcc=\"holm\", out=None):\n",
    "    ctrl, has_rev, res = run_analysis_df(df, control_label=control, alpha=alpha, sides=sides, mcc=mcc)\n",
    "    pretty = _format_pretty(res, has_rev)\n",
    "    print(f\"Control: {ctrl} | alpha={alpha} | sides={sides} | mcc={mcc}\")\n",
    "    display(pretty)\n",
    "    if out:\n",
    "        _save_outputs(pretty, res, out)\n",
    "    return pretty, res\n",
    "\n",
    "def analyze_file(path, control=None, alpha=0.05, sides=\"two\", mcc=\"holm\", out=None):\n",
    "    path = Path(path).expanduser().resolve()   # absolute path resolution\n",
    "    df = pd.read_csv(path)\n",
    "    return analyze_df(df, control=control, alpha=alpha, sides=sides, mcc=mcc, out=out)\n",
    "\n",
    "def _format_pretty(res, has_revenue):\n",
    "    pretty = res.copy()\n",
    "    pretty[\"cr\"] = (pretty[\"cr\"]*100).round(2)\n",
    "    if has_revenue:\n",
    "        pretty[\"aov\"] = pretty[\"aov\"].round(2)\n",
    "        pretty[\"rpv\"] = pretty[\"rpv\"].round(2)\n",
    "        pretty[\"delta_rpv\"] = pretty[\"delta_rpv\"].round(2)\n",
    "    pretty[\"lift_pp\"] = pretty[\"lift_pp\"].round(2)\n",
    "    pretty[\"lift_rel_%\"] = pretty[\"lift_rel_%\"].round(2)\n",
    "    pretty[\"z\"] = pretty[\"z\"].round(3)\n",
    "    pretty[\"p\"] = pretty[\"p\"].round(4)\n",
    "    pretty[\"p_adj\"] = pretty[\"p_adj\"].round(4)\n",
    "    pretty[\"ci_lo_pp\"] = pretty[\"ci_lo_pp\"].round(2)\n",
    "    pretty[\"ci_hi_pp\"] = pretty[\"ci_hi_pp\"].round(2)\n",
    "    return pretty\n",
    "\n",
    "def _save_outputs(pretty_df, raw_df, out_path):\n",
    "    out_path = Path(out_path).expanduser().resolve()\n",
    "    if out_path.suffix.lower() == \".xlsx\":\n",
    "        with pd.ExcelWriter(out_path, engine=\"openpyxl\") as xw:\n",
    "            pretty_df.to_excel(xw, sheet_name=\"results_pretty\", index=False)\n",
    "            raw_df.to_excel(xw, sheet_name=\"results_raw\", index=False)\n",
    "    else:\n",
    "        pretty_df.to_csv(out_path, index=False)\n",
    "    print(f\"Results saved to: {out_path}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d2bb9a9e-9b78-4dae-a6e3-d93441eaebc5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Control: A | alpha=0.05 | sides=two | mcc=holm\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>visits</th>\n",
       "      <th>conversions</th>\n",
       "      <th>cr</th>\n",
       "      <th>revenue</th>\n",
       "      <th>aov</th>\n",
       "      <th>rpv</th>\n",
       "      <th>z</th>\n",
       "      <th>p</th>\n",
       "      <th>ci_lo_pp</th>\n",
       "      <th>ci_hi_pp</th>\n",
       "      <th>lift_pp</th>\n",
       "      <th>lift_rel_%</th>\n",
       "      <th>delta_rpv</th>\n",
       "      <th>p_adj</th>\n",
       "      <th>significant</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>10074</td>\n",
       "      <td>772</td>\n",
       "      <td>7.66</td>\n",
       "      <td>36133</td>\n",
       "      <td>46.80</td>\n",
       "      <td>3.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>10234</td>\n",
       "      <td>824</td>\n",
       "      <td>8.05</td>\n",
       "      <td>38108</td>\n",
       "      <td>46.25</td>\n",
       "      <td>3.72</td>\n",
       "      <td>1.028</td>\n",
       "      <td>0.3039</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.39</td>\n",
       "      <td>5.07</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.3039</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>10478</td>\n",
       "      <td>915</td>\n",
       "      <td>8.73</td>\n",
       "      <td>41481</td>\n",
       "      <td>45.33</td>\n",
       "      <td>3.96</td>\n",
       "      <td>2.792</td>\n",
       "      <td>0.0052</td>\n",
       "      <td>0.32</td>\n",
       "      <td>1.82</td>\n",
       "      <td>1.07</td>\n",
       "      <td>13.95</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.0157</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D</td>\n",
       "      <td>10362</td>\n",
       "      <td>720</td>\n",
       "      <td>6.95</td>\n",
       "      <td>34045</td>\n",
       "      <td>47.28</td>\n",
       "      <td>3.29</td>\n",
       "      <td>-1.964</td>\n",
       "      <td>0.0496</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.71</td>\n",
       "      <td>-9.33</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.0991</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  variant  visits  conversions    cr  revenue    aov   rpv      z       p  \\\n",
       "0       A   10074          772  7.66    36133  46.80  3.59    NaN     NaN   \n",
       "1       B   10234          824  8.05    38108  46.25  3.72  1.028  0.3039   \n",
       "2       C   10478          915  8.73    41481  45.33  3.96  2.792  0.0052   \n",
       "3       D   10362          720  6.95    34045  47.28  3.29 -1.964  0.0496   \n",
       "\n",
       "   ci_lo_pp  ci_hi_pp  lift_pp  lift_rel_%  delta_rpv   p_adj  significant  \n",
       "0       NaN       NaN     0.00        0.00       0.00     NaN        False  \n",
       "1     -0.35      1.13     0.39        5.07       0.14  0.3039        False  \n",
       "2      0.32      1.82     1.07       13.95       0.37  0.0157         True  \n",
       "3     -1.43     -0.00    -0.71       -9.33      -0.30  0.0991        False  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Control: A | alpha=0.05 | sides=two | mcc=holm\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>visits</th>\n",
       "      <th>conversions</th>\n",
       "      <th>cr</th>\n",
       "      <th>revenue</th>\n",
       "      <th>aov</th>\n",
       "      <th>rpv</th>\n",
       "      <th>z</th>\n",
       "      <th>p</th>\n",
       "      <th>ci_lo_pp</th>\n",
       "      <th>ci_hi_pp</th>\n",
       "      <th>lift_pp</th>\n",
       "      <th>lift_rel_%</th>\n",
       "      <th>delta_rpv</th>\n",
       "      <th>p_adj</th>\n",
       "      <th>significant</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>10074</td>\n",
       "      <td>772</td>\n",
       "      <td>7.66</td>\n",
       "      <td>36133</td>\n",
       "      <td>46.80</td>\n",
       "      <td>3.59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>10234</td>\n",
       "      <td>824</td>\n",
       "      <td>8.05</td>\n",
       "      <td>38108</td>\n",
       "      <td>46.25</td>\n",
       "      <td>3.72</td>\n",
       "      <td>1.028</td>\n",
       "      <td>0.3039</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.39</td>\n",
       "      <td>5.07</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.3039</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>10478</td>\n",
       "      <td>915</td>\n",
       "      <td>8.73</td>\n",
       "      <td>41481</td>\n",
       "      <td>45.33</td>\n",
       "      <td>3.96</td>\n",
       "      <td>2.792</td>\n",
       "      <td>0.0052</td>\n",
       "      <td>0.32</td>\n",
       "      <td>1.82</td>\n",
       "      <td>1.07</td>\n",
       "      <td>13.95</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.0157</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D</td>\n",
       "      <td>10362</td>\n",
       "      <td>720</td>\n",
       "      <td>6.95</td>\n",
       "      <td>34045</td>\n",
       "      <td>47.28</td>\n",
       "      <td>3.29</td>\n",
       "      <td>-1.964</td>\n",
       "      <td>0.0496</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.71</td>\n",
       "      <td>-9.33</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.0991</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  variant  visits  conversions    cr  revenue    aov   rpv      z       p  \\\n",
       "0       A   10074          772  7.66    36133  46.80  3.59    NaN     NaN   \n",
       "1       B   10234          824  8.05    38108  46.25  3.72  1.028  0.3039   \n",
       "2       C   10478          915  8.73    41481  45.33  3.96  2.792  0.0052   \n",
       "3       D   10362          720  6.95    34045  47.28  3.29 -1.964  0.0496   \n",
       "\n",
       "   ci_lo_pp  ci_hi_pp  lift_pp  lift_rel_%  delta_rpv   p_adj  significant  \n",
       "0       NaN       NaN     0.00        0.00       0.00     NaN        False  \n",
       "1     -0.35      1.13     0.39        5.07       0.14  0.3039        False  \n",
       "2      0.32      1.82     1.07       13.95       0.37  0.0157         True  \n",
       "3     -1.43     -0.00    -0.71       -9.33      -0.30  0.0991        False  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results saved to: C:\\Users\\Mohammad\\Downloads\\ab_test_results.xlsx\n"
     ]
    }
   ],
   "source": [
    "# Minimal\n",
    "pretty, raw = analyze_file(r\"C:\\Users\\Mohammad\\Downloads\\ab_test_with_revenue.csv\")\n",
    "\n",
    "# With options + Excel export (two sheets: pretty & raw)\n",
    "pretty, raw = analyze_file(\n",
    "    r\"C:\\Users\\Mohammad\\Downloads\\ab_test_with_revenue.csv\",\n",
    "    control=\"A\", alpha=0.05, sides=\"two\", mcc=\"holm\",\n",
    "    out=r\"C:\\Users\\Mohammad\\Downloads\\ab_test_results.xlsx\"\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc956ad1-a51a-47e5-a7b8-dbb8612de126",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
